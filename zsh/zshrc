export EDITOR=vim
export VISUAL=vim
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
export LESS='-g -i -M -R -W -z-4 -x4'
export XDG_CONFIG_HOME=$HOME/.config
export GOPATH=$HOME/.go

path=(~/bin(N-/)
      /usr/local/bin(N-/)
      $GOPATH/bin(N-/)
      $HOME/.cask/bin(N-/)
      $HOME/.pulumi/bin(N-/)
      $HOME/.local/bin(N-/)
      $path
      )

# install zinit
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
. "${ZINIT_HOME}/zinit.zsh"

zinit blockf light-mode for \
  zimfw/input

zinit wait lucid blockf light-mode for \
  zsh-users/zsh-completions \
  zsh-users/zsh-autosuggestions \
  zdharma-continuum/fast-syntax-highlighting \
  zsh-users/zsh-history-substring-search \
  joshskidmore/zsh-fzf-history-search \
  b4b4r07/enhancd \
  from"gh-r" as"program" junegunn/fzf \
  as"completion" https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker

zinit snippet OMZP::gcloud
zinit snippet OMZP::gnu-utils
zinit snippet OMZP::mise

export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
autoload compinit && compinit

if [ $+commands[starship] ]; then
  eval "$(starship init zsh)"
fi

bindkey -e

# history
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000

# 単語の区切り文字を指定する
autoload -Uz select-word-style
select-word-style default
# ここで指定した文字は単語区切りとみなされる
# / も区切りと扱うので、^W でディレクトリ１つ分を削除できる
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..

# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'

# オプション
# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# beep を無効にする
setopt no_beep

# フローコントロールを無効にする
setopt no_flow_control

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdする
setopt auto_cd

# cd したら自動的にpushdする
setopt auto_pushd

# 重複したディレクトリを追加しない
setopt pushd_ignore_dups

# 同時に起動したzshの間でヒストリを共有する
setopt share_history

# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups

# ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_save_nodups

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# 補完候補が複数あるときに自動的に一覧表示する
setopt auto_menu

# 高機能なワイルドカード展開を使用する
setopt extended_glob

# alias
alias la="ls -a"
alias ll="ls -l"
alias lal="ls -al"

# OS
case ${OSTYPE} in
  darwin*)
    export CLICOLOR=1
    typeset -U path cdpath fpath manpath

    ## set PATH for sudo
    typeset -xT SUDO_PATH sudo_path
    typeset -U sudo_path
    sudo_path=({/usr/local,/usr,}/sbin(N-/))

    ## set PATH
    path=(~/bin(N-/)
          /opt/homebrew/bin(N-/)
          $path
          )
  ;;
  linux*)
    #Linux用の設定
  ;;
esac

# WSLのときにする処理
if [[ "$(uname -r)" == *microsoft* ]]; then
  export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock

  ALREADY_RUNNING=$(ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent"; echo $?)
  if [[ $ALREADY_RUNNING != "0" ]]; then
    if [[ -S $SSH_AUTH_SOCK ]]; then
      echo "removing previous socket..."
      rm $SSH_AUTH_SOCK
    fi
    echo "Starting SSH-Agent relay..."
    (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
  fi
fi

setopt magic_equal_subst

# GCLOUD ENV
export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gcloud/application_default_credentials.json

# ghq
function ghq-fzf() {
  local dir=$(ghq root)/$(ghq list | fzf)
  if [ -n $dir ]; then
    BUFFER="cd $dir"
    zle accept-line
  fi
}
zle -N ghq-fzf
bindkey '^g' ghq-fzf

autoload -Uz compinit
compinit

# compile .zshrc
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi
